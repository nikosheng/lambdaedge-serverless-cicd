service: lambdaedge-cicd-project

frameworkVersion: '2'

# AWS provider
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  role: 
    Fn::GetAtt:
        - lambdaEdgeRole
        - Arn

# exclude or include local folders of files for deployment
package:
  exclude:
    - node_modules/**
    - package-lock.json

# lambda function details, for lambda@edge, we could setup 4 functions to include `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
functions:
  originResponse:
    handler: lambdaEdge/originResponse.handler
    events:
      - preExistingCloudFront:
        # ---- Mandatory Properties -----
          distributionId: E3BKY5OQ26MZ4W # CloudFront distribution ID you want to associate
          eventType: origin-response # Choose event to trigger your Lambda function, which are `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
          pathPattern: '*.pg' # Specifying the CloudFront behavior
          includeBody: false # Whether including body or not within request
        # ---- Optional Property -----
          #stage: dev # Specify the stage at which you want this CloudFront distribution to be updated
  # viewerRequest:
  #   handler: lambdaEdge/viewerRequest.handler
  #   events:
  #     - preExistingCloudFront:
  #       # ---- Mandatory Properties -----
  #         distributionId: E3BKY5OQ26MZ4W # CloudFront distribution ID you want to associate
  #         eventType: viewer-request # Choose event to trigger your Lambda function, which are `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
  #         pathPattern: '*.png' # Specifying the CloudFront behavior
  #         includeBody: false # Whether including body or not within request
  #       # ---- Optional Property -----
  #         #stage: dev # Specify the stage at which you want this CloudFront distribution to be updated
  
# IAM Role and policy statement
resources:
  Resources:
    lambdaEdgeRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: lambdaEdgeRole # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: serverless-framework-lambda-edge-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs:*:*:*'

# plugins to ease development
plugins:
  - serverless-lambda-edge-pre-existing-cloudfront
  - serverless-python-requirements

# create a docker environment for lambda package
custom:
  pythonRequirements:
    dockerizePip: non-linux
